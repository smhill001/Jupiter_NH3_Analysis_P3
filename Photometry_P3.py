# -*- coding: utf-8 -*-"""###############################################################################NAME:       PhotometryJupiter.py - Special Jupiter Version!PURPOSE:    To extract photometric information from multiple targets in             a single FITS image file then plot the results and write the data            to file. This is a variation on the BroadBand_Photometry.py            program in the /Python Play/SpectroPhotometry/Photometry directory.            EXAMPLE:    PhotometryJupiter("647CNT","2021")            INPUTS:     A list of sessions (observing dates) and two filters, in-band             (absorption) and out-of-band (continuum) are given            LIBRARIES:  This code calls the SpecPhotLibNew.py library. It is an updated            subset of the SpecPhotLibV006.py library that had grown cumbersome.                    UPDATES:            2021-08-10: This module has had much of its content stripped                        and put into separate library modules. It is now                        essentially a driver program.            2022-01-25: Converted to Python 3###############################################################################@author: Steven Hill"""def PhotometryJupiter(MeasFilt,Year,Diagnostics=False):    import os    os.linesep="\r"        import sys    drive='c:'    sys.path.append(drive+'/Astronomy/Python Play')    sys.path.append(drive+'/Astronomy/Python Play/SpectroPhotometry/Photometry_P3')    sys.path.append(drive+'/Astronomy/Python Play/FITSImageStuff')    sys.path.append(drive+'/Astronomy/Projects/SAS 2021 Project/Analysis')          import pylab as pl    from astropy.io import ascii    import PhotLibJup_P3 as PLJ    from datetime import datetime    import numpy as np    import matplotlib.dates as mdates    from datetime import datetime, timedelta    import json        ###############################################################################    Filters={"620CH4":["632OI","656HIA"],             "647NH3":["632OI","656HIA"],             "647CNT":["632OI","656HIA","658NII", "672SII"],"889CH4":["940NIR"],             "656HIA":["632OI","658NII", "672SII"]}        Years=["2020","2021","2022"]        DateLims={"2020":[datetime(2020,9,1,0,0,0),datetime(2020,10,10,0,0,0)],              "2021":[datetime(2021,8,1,0,0,0),datetime(2021,11,30,0,0,0)],              "2022":[datetime(2022,10,1,0,0,0),datetime(2022,11,30,0,0,0)]}        ylims={"620CH4":[0.85,1.05],"647CNT":[0.9,1.1],"647NH3":[0.9,1.1],"889CH4":[0.0,0.2],"656HIA":[0.9,1.1]}        SessionDatesWrite=\          {"647CNT":{"656HIA":['20200902UT','20200903UT','20200904UT','20200913UT',                               '20200914UT','20200915UT','20200924UT','20200925UT',                               '20201007UT','20201008UT','20201009UT',                               '20210812UT','20210817UT','20210830UT','20210905UT',                               '20210906UT','20211122UT','20211123UT'],                     "672SII":['20200924UT','20200925UT','20201007UT','20201008UT',                               '20201009UT'],                     "658NII":['20200915UT'],                     "632OI":['20210812UT','20210817UT','20210830UT','20210905UT',                               '20210906UT','20211122UT','20211123UT']},                      "647NH3":{"656HIA":["20221031UT","20221101UT","20221109UT","20221121UT"],                     "632OI":["20221031UT","20221101UT","20221109UT","20221121UT"]},                      "620CH4":{"656HIA":["20221031UT","20221101UT","20221109UT","20221121UT"],                     "632OI":["20221031UT","20221101UT","20221109UT","20221121UT"]},                      "889CH4":{"940NIR":['20200902UT','20200903UT','20200904UT','20200913UT',                               '20200914UT','20200915UT','20200924UT','20200925UT',                               '20201007UT','20201008UT','20201009UT','20210812UT',                               '20210817UT','20210830UT','20210905UT','20210906UT']},                      "656HIA":{"672SII":['20200924UT','20200925UT','20201007UT','20201008UT',                               '20201009UT'],                     "658NII":['20200915UT'],                     "632OI":['20210812UT','20210817UT','20210830UT','20210905UT',                               '20210906UT','20211122UT','20211123UT'],                     "730OII":['20211122UT','20211123UT']}}    with open("C:/Astronomy/Projects/SAS 2021 Ammonia/Jupiter_NH3_Analysis_P3/sample.json", "w") as outfile:        json.dump(SessionDatesWrite,outfile)            with open("C:/Astronomy/Projects/SAS 2021 Ammonia/Jupiter_NH3_Analysis_P3/sample.json") as json_file:        SessionDatesRead = json.load(json_file)            SessionDates=SessionDatesRead    #******************************************************************************    # Initialize metadata for the 2020 647/656 campaign    #******************************************************************************    ExpectedLevel={"620CH4":0.900,"647CNT":0.961,"647NH3":0.961,"889CH4":0.1,"656HIA":1.0}    clrs={"632OI":"m","656HIA":"k","658NII":'g', "672SII":"b","940NIR":'k'}    #MeasFilt='647CNT'    #Year=Years[1]    RefFiltYearArray=[]    RefFiltMeanArray=[]    RefFiltStd_Array=[]    RefFiltCnt_Array=[]    RefFiltWaveArray=[]    RefFiltYearIndex=0    First=True    for RefFilt in Filters[MeasFilt]:   #For a given Measurement Filter, loop over the reference (continuum) filters        print(RefFilt)        RefFiltYearArray.append(RefFilt)        tmpdates=SessionDates[MeasFilt][RefFilt]        print (tmpdates)        Dates= [x for x in tmpdates if x[0:4]==Year]        if Dates:            root_path,pathout,observations=PLJ.Campaign(Dates)            AllTable=PLJ.CreatePhotTable(root_path,pathout,observations,Dates,Diagnostics)            YY=PLJ.SummaryTablePlot(AllTable,Dates,MeasFilt,RefFilt,pathout)            print("YY Dates=",Dates)            #ascii.write(YY,pathout+'Transmission_'+MeasFilt+'_over_'+RefFilt+'.csv',format='csv',            #            overwrite=True,delimiter=',')            #print pathout            #pl.savefig(pathout+'Jupiter-Photometry_'+MeasFilt+'_over_'+RefFilt+'.png',dpi=300)                        datetimearray=np.empty([len(Dates)],dtype=datetime)            tmperr=np.zeros(len(Dates))            tmparr=np.zeros(len(Dates))            counter=0            for date in Dates:                # Create plotable date array                datetimearray[counter]=datetime.strptime(date,'%Y%m%dUT')                tmparr[counter]=YY[date][8]                tmperr[counter]=YY[date][10]                counter=counter+1                                    if First:                starttime=DateLims[Year][0]                endtime=DateLims[Year][1]                            figsum,ax1=pl.subplots(1,1,figsize=(6,4), dpi=150, facecolor="white")                mkrsize=5.0                ax1.set_xlim(starttime,endtime)                ax1.set_ylim(ylims[MeasFilt][0],ylims[MeasFilt][1]+.0001)                ax1.set_yticks(np.arange(ylims[MeasFilt][0],ylims[MeasFilt][1]+0.0001, step=0.05))                ############## NEED A SWITCH FOR EXPECTED VALUE FOR CH4 RATIO                #plotshow=ax1.plot_date([starttime,endtime],ExpectedLevel[MeasFilt]*np.ones(2),xdate=True,                #             linestyle='dashed',markersize=0.0,color='r',linewidth=1.0)                meanarr=tmparr                First=False            else:                meanarr=np.concatenate((meanarr,tmparr))                            ax1.plot_date(datetimearray,tmparr,xdate=True,fmt='o',                         markersize=mkrsize,label=MeasFilt[0:3]+"/"+RefFilt[0:3],color=clrs[RefFilt])            ax1.errorbar(datetimearray,tmparr,yerr=tmperr,linewidth=0.0,ecolor=clrs[RefFilt],elinewidth=1.0)                        meantmp=np.mean(tmparr)            RefFiltMeanArray.append(meantmp)            SEMtmp=np.std(tmparr)/np.sqrt(tmparr.size)            RefFiltStd_Array.append(SEMtmp)            RefFiltCnt_Array.append(counter)            RefFiltWaveArray.append(float(RefFilt[0:3]))                        ax1.plot_date([starttime,endtime],meantmp*np.ones(2),xdate=True,                         linestyle='dashed',markersize=0.0,color=clrs[RefFilt],linewidth=1.0,label="Avg. Obs.="+str(meantmp)[0:5]+r"$\pm$"+str(SEMtmp)[0:6])    #ax1.plot_date([starttime,endtime],np.mean(meanarr)*np.ones(2),xdate=True,    #                     linestyle='dashed',markersize=0.0,color='k',linewidth=1.0)    Mean=np.mean(meanarr)    STD=np.std(meanarr)    SEM=STD/np.sqrt(meanarr.size)    ax1.plot_date([starttime,endtime],np.mean(meanarr)*np.ones(2),xdate=True,                 linestyle='dashed',markersize=0.0,color='k',linewidth=1.0,label="Avg. Obs.="+str(Mean)[0:5]+r"$\pm$"+str(SEM)[0:6])    ax1.fill_between([starttime,endtime],Mean+STD,Mean-STD,color='C0',alpha=0.2)    ax1.fill_between([starttime,endtime],Mean+SEM,Mean-SEM,color='C0',alpha=0.3)    ax1.plot_date([starttime,endtime],ExpectedLevel[MeasFilt]*np.ones(2),xdate=True,                 linestyle='dashed',markersize=0.0,color='r',linewidth=1.0,label="Predicted="+str(ExpectedLevel[MeasFilt]))    xtks = np.arange(starttime, endtime, timedelta(days=7)).astype(datetime)        ax1.set(xlim=(starttime, endtime))    ax1.set_xticks(xtks)    ax1.xaxis.set_major_formatter(mdates.DateFormatter('%b-%d'))    ax1.set_xlabel(Year,fontsize=12)    ax1.set_ylabel("Transmission",fontsize=12)    ax1.set_title("Disk-Integrated Transmission ("+MeasFilt+" Filter)")    ax1.tick_params(axis='both',labelsize=9)    #ax1.text(starttime, np.mean(meanarr),str(np.mean(meanarr))[0:5],    #         horizontalalignment='left', verticalalignment='bottom',color='k',fontsize=8)    #ax1.text(starttime, ExpectedLevel[MeasFilt],str(ExpectedLevel[MeasFilt])[0:5],    #         horizontalalignment='left', verticalalignment='bottom',color='r',fontsize=8)        ax1.legend(fontsize=8,loc='upper left')    ax1.grid('both', linewidth=0.5)    figsum.subplots_adjust(left=0.11, bottom=0.12, right=0.98, top=0.92)    figsum.savefig(pathout+'Jupiter-Photometry_'+Year+'_'+MeasFilt+'_Summary.png'+Year+'.png',dpi=300)    ###########################################################################    print(RefFiltMeanArray)    #fit=np.polyfit(RefFiltWaveArray,np.array(RefFiltMeanArray),1)    fitwt=np.polyfit(RefFiltWaveArray,np.array(RefFiltMeanArray),1,w=RefFiltCnt_Array)    wvfit=np.array([600.,620.,632.,647.,656.,658.,672.,700.])    #fitline=fit[0]*wvfit+fit[1]    #fitvalue=fit[0]*float(MeasFilt[0:3])+fit[1]    fitlinewt=fitwt[0]*wvfit+fitwt[1]    fitvaluewt=fitwt[0]*float(MeasFilt[0:3])+fitwt[1]    print(fitwt)        figslope,axslope=pl.subplots(1,1,figsize=(6,4), dpi=150, facecolor="white")    axslope.set(xlim=(600., 700.),ylim=(0.85,1.00))        axslope.set_ylabel("Transmission",fontsize=12)    axslope.set_xlabel("Wavelength (nm)",fontsize=12)    axslope.set_title(Year+" Disk-Integrated Transmission ("+MeasFilt+" Filter)")    axslope.tick_params(axis='both',labelsize=9)    axslope.scatter(RefFiltWaveArray,np.array(RefFiltMeanArray),color='k',label='Annual Obs',s=20)    axslope.errorbar(RefFiltWaveArray,np.array(RefFiltMeanArray),yerr=RefFiltStd_Array,linewidth=0.0,ecolor='k',elinewidth=1.0)    axslope.plot([600.,700.],np.mean(meanarr)*np.ones(2),                 linestyle='dashed',markersize=0.0,color='k',linewidth=1.0,label="Average="+str(Mean)[0:5]+r"$\pm$"+str(SEM)[0:6])    #axslope.plot(wvfit,fitline,    #             linestyle='dashed',markersize=0.0,color='k',linewidth=1.0)    #axslope.scatter([float(MeasFilt[0:3])],[fitvalue],color='k',s=20,label='Fit Value='+str(fitvalue)[0:5])    axslope.plot(wvfit,fitlinewt,                 linestyle='dashed',markersize=0.0,color='k',linewidth=1.0,                 label='Fit Wt Rel Color Slope='+str(fitwt[0])[0:7]+' /nm')    axslope.scatter([float(MeasFilt[0:3])],[fitvaluewt],color='k',marker='o',facecolors='none',                    s=50,edgecolors='k',label='Fit Value Wt='+str(fitvaluewt)[0:5])    axslope.scatter([float(MeasFilt[0:3])],[ExpectedLevel[MeasFilt]],marker='o',facecolors='none',                 s=50.0,edgecolors='r',label="Predicted="+str(ExpectedLevel[MeasFilt]))    axslope.plot([600.,700.],ExpectedLevel[MeasFilt]*np.ones(2),                 linestyle='dashed',markersize=0.0,color='r',linewidth=1.0,label="Predicted="+str(ExpectedLevel[MeasFilt]))    axslope.legend(fontsize=8,loc='best')    axslope.grid('both', linewidth=0.5)    figslope.subplots_adjust(left=0.11, bottom=0.12, right=0.98, top=0.92)    figslope.savefig(pathout+'Jupiter-Photometry_'+Year+'_'+MeasFilt+'_Slope.png',dpi=300)