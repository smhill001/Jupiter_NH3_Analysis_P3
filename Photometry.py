# -*- coding: utf-8 -*-"""###############################################################################NAME:       PhotometryJupiter.py - Special Jupiter Version!PURPOSE:    To extract photometric information from multiple targets in             a single FITS image file then plot the results and write the data            to file. This is a variation on the BroadBand_Photometry.py            program in the /Python Play/SpectroPhotometry/Photometry directory.            EXAMPLE:    PhotometryJupiter("647CNT","2021")            INPUTS:     A list of sessions (observing dates) and two filters, in-band             (absorption) and out-of-band (continuum) are given            LIBRARIES:  This code calls the SpecPhotLibNew.py library. It is an updated            subset of the SpecPhotLibV006.py library that had grown cumbersome.                    UPDATES:            2021-08-10: This module has had much of its content stripped                        and put into separate library modules. It is now                        essentially a driver program.###############################################################################@author: Steven Hill"""def PhotometryJupiter(MeasFilt,Year):    import os    os.linesep="\r"        import sys    drive='f:'    sys.path.append(drive+'/Astronomy/Python Play')    sys.path.append(drive+'/Astronomy/Python Play/SpectroPhotometry/Photometry')    sys.path.append(drive+'/Astronomy/Python Play/FITSImageStuff')    sys.path.append(drive+'/Astronomy/Projects/SAS 2021 Project/Analysis')          import pylab as pl    from astropy.io import ascii    import PhotLibJup as PLJ    from datetime import datetime    import numpy as np        ###############################################################################    Filters={"647CNT":["632OI","656HIA","658NII", "672SII"],"889CH4":["940NIR"],             "656HIA":["632OI","658NII", "672SII"]}        Years=["2020","2021"]        DateLims={"2020":[datetime(2020,9,1,0,0,0),datetime(2020,10,10,0,0,0)],              "2021":[datetime(2021,8,1,0,0,0),datetime(2021,11,30,0,0,0)]}        ylims={"647CNT":[0.9,1.1],"889CH4":[0.0,0.2],"656HIA":[0.9,1.1]}        SessionDates={"647CNT":{"656HIA":['20200902UT','20200903UT','20200904UT','20200913UT',                               '20200914UT','20200915UT','20200924UT','20200925UT',                               '20201007UT','20201008UT','20201009UT',                               '20210812UT','20210817UT','20210830UT','20210905UT',                               '20210906UT','20211122UT','20211123UT'],                     "672SII":['20200924UT','20200925UT','20201007UT','20201008UT',                               '20201009UT'],                     "658NII":['20200915UT'],                     "632OI":['20210812UT','20210817UT','20210830UT','20210905UT',                               '20210906UT','20211122UT','20211123UT']},           "889CH4":{"940NIR":['20200902UT','20200903UT','20200904UT','20200913UT',                               '20200914UT','20200915UT','20200924UT','20200925UT',                               '20201007UT','20201008UT','20201009UT','20210812UT',                               '20210817UT','20210830UT','20210905UT','20210906UT']},           "656HIA":{"672SII":['20200924UT','20200925UT','20201007UT','20201008UT',                               '20201009UT'],                     "658NII":['20200915UT'],                     "632OI":['20210812UT','20210817UT','20210830UT','20210905UT',                               '20210906UT','20211122UT','20211123UT'],                     "730OII":['20211122UT','20211123UT']}}        #******************************************************************************    # Initialize metadata for the 2020 647/656 campaign    #******************************************************************************    ExpectedLevel={"647CNT":0.961,"889CH4":0.1,"656HIA":1.0}    clrs={"632OI":"m","656HIA":"k","658NII":'g', "672SII":"b","940NIR":'k'}    #MeasFilt='647CNT'    #Year=Years[1]    First=True    for RefFilt in Filters[MeasFilt]:        print RefFilt        tmpdates=SessionDates[MeasFilt][RefFilt]        print tmpdates        Dates= [x for x in tmpdates if x[0:4]==Year]        if Dates:            root_path,pathout,observations=PLJ.Campaign(Dates)            AllTable=PLJ.CreatePhotTable(root_path,pathout,observations,Dates)            YY=PLJ.SummaryTablePlot(AllTable,Dates,MeasFilt,RefFilt,pathout)            print "YY Dates=",Dates            #ascii.write(YY,pathout+'Transmission_'+MeasFilt+'_over_'+RefFilt+'.csv',format='csv',            #            overwrite=True,delimiter=',')            #print pathout            #pl.savefig(pathout+'Jupiter-Photometry_'+MeasFilt+'_over_'+RefFilt+'.png',dpi=300)                        datetimearray=np.empty([len(Dates)],dtype=datetime)            tmperr=np.zeros(len(Dates))            tmparr=np.zeros(len(Dates))            counter=0            for date in Dates:                # Create plotable date array                datetimearray[counter]=datetime.strptime(date,'%Y%m%dUT')                tmparr[counter]=YY[date][8]                tmperr[counter]=YY[date][10]                counter=counter+1                                    if First:                starttime=DateLims[Year][0]                endtime=DateLims[Year][1]                            figsum,ax1=pl.subplots(1,1,figsize=(6,4), dpi=150, facecolor="white")                mkrsize=5.0                ax1.set_xlim(starttime,endtime)                ax1.set_ylim(ylims[MeasFilt][0],ylims[MeasFilt][1]+.0001)                ax1.set_yticks(np.arange(ylims[MeasFilt][0],ylims[MeasFilt][1]+0.0001, step=0.05))                ############## NEED A SWITCH FOR EXPECTED VALUE FOR CH4 RATIO                plotshow=ax1.plot_date([starttime,endtime],ExpectedLevel[MeasFilt]*np.ones(2),xdate=True,                             linestyle='dashed',markersize=0.0,color='r',linewidth=1.0)                meanarr=tmparr                First=False            else:                meanarr=np.concatenate((meanarr,tmparr))                            ax1.plot_date(datetimearray,tmparr,xdate=True,fmt='o',                         markersize=mkrsize,label=MeasFilt[0:3]+"/"+RefFilt[0:3],color=clrs[RefFilt])            ax1.errorbar(datetimearray,tmparr,yerr=tmperr,linewidth=0.0,ecolor=clrs[RefFilt],elinewidth=1.0)        ax1.plot_date([starttime,endtime],np.mean(meanarr)*np.ones(2),xdate=True,                         linestyle='dashed',markersize=0.0,color='k',linewidth=1.0)    ax1.text(starttime, np.mean(meanarr),str(np.mean(meanarr))[0:5],             horizontalalignment='left', verticalalignment='bottom',color='k',fontsize=8)    ax1.text(starttime, ExpectedLevel[MeasFilt],str(ExpectedLevel[MeasFilt])[0:5],             horizontalalignment='left', verticalalignment='bottom',color='r',fontsize=8)        ax1.legend(fontsize=8,loc='upper left')    ax1.grid('both', linewidth=0.5)    figsum.savefig(pathout+'Jupiter-Photometry_'+Year+'_'+MeasFilt+'_Summary.png'+Year+'.png',dpi=300)